// Generated by CoffeeScript 1.3.3

/*
maternitypants - giving your textareas some room to grow (or let go) since 2012
Author: Jeff Bordogna, @jeffthink
Version: 0.1 (maybe stable?)
License: See https://github.com/jeffthink/jmaternitypants
*/


(function() {

  $(function() {
    $.maternitypants = function(element, options) {
      var applyKeyListeners, applyMouseListeners, bindEvent, createForm, editFn, getContent, lineBreakEditTransform, lineBreakSubmitTransform, makeExpandable, reset, resize, setDefaultTransformFns, submit,
        _this = this;
      this.defaults = {
        event: 'dblclick',
        expandable: true,
        name: 'value',
        onBlurAction: 'cancel',
        forceSubmit: false,
        transformMode: null,
        onTransformEdit: null,
        onTransformSubmit: null,
        onSubmit: null
      };
      this.cloneCSSProperties = ['lineHeight', 'textDecoration', 'letterSpacing', 'fontSize', 'fontFamily', 'fontStyle', 'fontWeight', 'textTransform', 'textAlign', 'direction', 'wordSpacing', 'fontSizeAdjust', 'wordWrap', 'word-break', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'borderBottomWidth', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom', 'boxSizing', 'webkitBoxSizing', 'mozBoxSizing', 'msBoxSizing'];
      this.settings = {};
      this.$element = $(element);
      bindEvent = function() {
        return _this.$element.bind(_this.settings.event, editFn);
      };
      editFn = function() {
        _this.revertVal = _this.$element.html();
        _this.$element.html('');
        return createForm();
      };
      createForm = function() {
        var input;
        input = $('<textarea />');
        input.attr('name', _this.settings.name);
        input.val(getContent());
        _this.$element.append(input);
        applyKeyListeners(input);
        applyMouseListeners(input);
        if (_this.settings.expandable) {
          makeExpandable(input);
        }
        return input.focus();
      };
      applyKeyListeners = function(input) {
        return input.keydown(function(e) {
          if (e.keyCode === 27) {
            e.preventDefault();
            return reset();
          }
        });
      };
      applyMouseListeners = function(input) {
        return input.blur(function(e) {
          if (_this.settings.onBlurAction === 'cancel') {
            return reset();
          } else if (_this.settings.onBlurAction === 'submit') {
            return submit(input);
          }
        });
      };
      makeExpandable = function(input) {
        var container, pre;
        input.css({
          position: 'absolute',
          overflow: 'hidden',
          width: '100%',
          height: '100%'
        });
        container = input.wrap('<div></div>').parent().css({
          position: 'relative'
        });
        input.after('<pre><span></span><br></pre>');
        pre = container.find('pre').css({
          visibility: 'hidden',
          whiteSpace: 'pre-wrap'
        });
        $.each(_this.cloneCSSProperties, function(i, p) {
          var val;
          val = input.css(p);
          if (pre.css(p) !== val) {
            pre.css(p, val);
          }
          return null;
        });
        input.bind('input propertychange keyup', function(e) {
          return resize($(e.target));
        });
        return resize(input);
      };
      getContent = function() {
        var _base;
        return (typeof (_base = _this.settings).onTransformEdit === "function" ? _base.onTransformEdit(_this.revertVal) : void 0) || _this.revertVal;
      };
      submit = function(input) {
        var val, _base, _base1;
        val = (typeof (_base = _this.settings).onTransformSubmit === "function" ? _base.onTransformSubmit(input.val()) : void 0) || input.val();
        _this.$element.html(val);
        if (val !== _this.revertVal || _this.settings.forceSubmit) {
          return typeof (_base1 = _this.settings).onSubmit === "function" ? _base1.onSubmit(val) : void 0;
        }
      };
      reset = function() {
        return _this.$element.html(_this.revertVal);
      };
      resize = function(input) {
        return input.parent().children('pre').children('span').html(input.val());
      };
      setDefaultTransformFns = function() {
        if (_this.settings.transformMode === 'line-break') {
          if (!_this.settings.onTransformEdit) {
            _this.settings.onTransformEdit = lineBreakEditTransform;
          }
          if (!_this.settings.onTransformSubmit) {
            return _this.settings.onTransformSubmit = lineBreakSubmitTransform;
          }
        }
      };
      lineBreakEditTransform = function(val) {
        return val.replace(/<br>/g, '\n');
      };
      lineBreakSubmitTransform = function(val) {
        return val.replace(/\n/g, '<br>');
      };
      this.init = function() {
        this.settings = $.extend({}, this.defaults, options);
        setDefaultTransformFns();
        return bindEvent();
      };
      return this.init();
    };
    return $.fn.maternitypants = function(options) {
      return this.each(function() {
        var maternitypants;
        if (!$(this).data('maternitypants')) {
          maternitypants = new $.maternitypants(this, options);
          return $(this).data('maternitypants', maternitypants);
        }
      });
    };
  });

}).call(this);
